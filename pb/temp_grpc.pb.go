// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package transaction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TransactorClient is the client API for Transactor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactorClient interface {
	SendTemp(ctx context.Context, in *TempEvent, opts ...grpc.CallOption) (*Void, error)
}

type transactorClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactorClient(cc grpc.ClientConnInterface) TransactorClient {
	return &transactorClient{cc}
}

func (c *transactorClient) SendTemp(ctx context.Context, in *TempEvent, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/transaction.Transactor/SendTemp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactorServer is the server API for Transactor service.
// All implementations must embed UnimplementedTransactorServer
// for forward compatibility
type TransactorServer interface {
	SendTemp(context.Context, *TempEvent) (*Void, error)
	mustEmbedUnimplementedTransactorServer()
}

// UnimplementedTransactorServer must be embedded to have forward compatible implementations.
type UnimplementedTransactorServer struct {
}

func (UnimplementedTransactorServer) SendTemp(context.Context, *TempEvent) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTemp not implemented")
}
func (UnimplementedTransactorServer) mustEmbedUnimplementedTransactorServer() {}

// UnsafeTransactorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactorServer will
// result in compilation errors.
type UnsafeTransactorServer interface {
	mustEmbedUnimplementedTransactorServer()
}

func RegisterTransactorServer(s grpc.ServiceRegistrar, srv TransactorServer) {
	s.RegisterService(&Transactor_ServiceDesc, srv)
}

func _Transactor_SendTemp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactorServer).SendTemp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transactor/SendTemp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactorServer).SendTemp(ctx, req.(*TempEvent))
	}
	return interceptor(ctx, in, info, handler)
}

// Transactor_ServiceDesc is the grpc.ServiceDesc for Transactor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transactor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transaction.Transactor",
	HandlerType: (*TransactorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTemp",
			Handler:    _Transactor_SendTemp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/temp.proto",
}
